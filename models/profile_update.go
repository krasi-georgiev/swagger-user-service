// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProfileUpdate profile update
// swagger:model ProfileUpdate

type ProfileUpdate struct {

	// active
	Active string `json:"active,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// password
	Password string `json:"password,omitempty"`

	// person id
	PersonID int64 `json:"person_id,omitempty"`

	// reset password next login
	ResetPasswordNextLogin string `json:"reset_password_next_login,omitempty"`

	// role
	Role []int64 `json:"role"`

	// tenant id
	TenantID int64 `json:"tenant_id,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

/* polymorph ProfileUpdate active false */

/* polymorph ProfileUpdate email false */

/* polymorph ProfileUpdate id false */

/* polymorph ProfileUpdate password false */

/* polymorph ProfileUpdate person_id false */

/* polymorph ProfileUpdate reset_password_next_login false */

/* polymorph ProfileUpdate role false */

/* polymorph ProfileUpdate tenant_id false */

/* polymorph ProfileUpdate username false */

// Validate validates this profile update
func (m *ProfileUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResetPasswordNextLogin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var profileUpdateTypeActivePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["true","false"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileUpdateTypeActivePropEnum = append(profileUpdateTypeActivePropEnum, v)
	}
}

const (
	// ProfileUpdateActiveTrue captures enum value "true"
	ProfileUpdateActiveTrue string = "true"
	// ProfileUpdateActiveFalse captures enum value "false"
	ProfileUpdateActiveFalse string = "false"
)

// prop value enum
func (m *ProfileUpdate) validateActiveEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileUpdateTypeActivePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileUpdate) validateActive(formats strfmt.Registry) error {

	if swag.IsZero(m.Active) { // not required
		return nil
	}

	// value enum
	if err := m.validateActiveEnum("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *ProfileUpdate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var profileUpdateTypeResetPasswordNextLoginPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["true","false"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileUpdateTypeResetPasswordNextLoginPropEnum = append(profileUpdateTypeResetPasswordNextLoginPropEnum, v)
	}
}

const (
	// ProfileUpdateResetPasswordNextLoginTrue captures enum value "true"
	ProfileUpdateResetPasswordNextLoginTrue string = "true"
	// ProfileUpdateResetPasswordNextLoginFalse captures enum value "false"
	ProfileUpdateResetPasswordNextLoginFalse string = "false"
)

// prop value enum
func (m *ProfileUpdate) validateResetPasswordNextLoginEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileUpdateTypeResetPasswordNextLoginPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileUpdate) validateResetPasswordNextLogin(formats strfmt.Registry) error {

	if swag.IsZero(m.ResetPasswordNextLogin) { // not required
		return nil
	}

	// value enum
	if err := m.validateResetPasswordNextLoginEnum("reset_password_next_login", "body", m.ResetPasswordNextLogin); err != nil {
		return err
	}

	return nil
}

func (m *ProfileUpdate) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProfileUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileUpdate) UnmarshalBinary(b []byte) error {
	var res ProfileUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
