// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProfileInfo profile info
// swagger:model ProfileInfo

type ProfileInfo struct {

	// active
	// Required: true
	Active *bool `json:"active"`

	// created
	// Required: true
	Created *string `json:"created"`

	// email
	// Required: true
	Email *string `json:"email"`

	// f2a
	// Required: true
	F2a *bool `json:"f2a"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// person id
	// Required: true
	PersonID *int64 `json:"person_id"`

	// reset password next login
	// Required: true
	ResetPasswordNextLogin *bool `json:"reset_password_next_login"`

	// tenant id
	// Required: true
	TenantID *int64 `json:"tenant_id"`

	// username
	// Required: true
	Username *string `json:"username"`

	// voice
	// Required: true
	Voice *bool `json:"voice"`
}

/* polymorph ProfileInfo active false */

/* polymorph ProfileInfo created false */

/* polymorph ProfileInfo email false */

/* polymorph ProfileInfo f2a false */

/* polymorph ProfileInfo id false */

/* polymorph ProfileInfo person_id false */

/* polymorph ProfileInfo reset_password_next_login false */

/* polymorph ProfileInfo tenant_id false */

/* polymorph ProfileInfo username false */

/* polymorph ProfileInfo voice false */

// Validate validates this profile info
func (m *ProfileInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateF2a(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePersonID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResetPasswordNextLogin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVoice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileInfo) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *ProfileInfo) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *ProfileInfo) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *ProfileInfo) validateF2a(formats strfmt.Registry) error {

	if err := validate.Required("f2a", "body", m.F2a); err != nil {
		return err
	}

	return nil
}

func (m *ProfileInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProfileInfo) validatePersonID(formats strfmt.Registry) error {

	if err := validate.Required("person_id", "body", m.PersonID); err != nil {
		return err
	}

	return nil
}

func (m *ProfileInfo) validateResetPasswordNextLogin(formats strfmt.Registry) error {

	if err := validate.Required("reset_password_next_login", "body", m.ResetPasswordNextLogin); err != nil {
		return err
	}

	return nil
}

func (m *ProfileInfo) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *ProfileInfo) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *ProfileInfo) validateVoice(formats strfmt.Registry) error {

	if err := validate.Required("voice", "body", m.Voice); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProfileInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileInfo) UnmarshalBinary(b []byte) error {
	var res ProfileInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
