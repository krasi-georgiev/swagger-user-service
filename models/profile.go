// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Profile profile
// swagger:model Profile

type Profile struct {

	// active
	// Required: true
	Active *bool `json:"active"`

	// email
	Email string `json:"email,omitempty"`

	// f2a enforced
	F2aEnforced bool `json:"f2a_enforced,omitempty"`

	// password
	// Required: true
	Password *string `json:"password"`

	// person id
	PersonID *int64 `json:"person_id,omitempty"`

	// reset password next login
	// Required: true
	ResetPasswordNextLogin *bool `json:"reset_password_next_login"`

	// role
	// Required: true
	Role []int64 `json:"role"`

	// tenant id
	// Required: true
	TenantID *int64 `json:"tenant_id"`

	// username
	// Required: true
	Username *string `json:"username"`

	// voice
	Voice bool `json:"voice,omitempty"`
}

/* polymorph Profile active false */

/* polymorph Profile email false */

/* polymorph Profile f2a_enforced false */

/* polymorph Profile password false */

/* polymorph Profile person_id false */

/* polymorph Profile reset_password_next_login false */

/* polymorph Profile role false */

/* polymorph Profile tenant_id false */

/* polymorph Profile username false */

/* polymorph Profile voice false */

// Validate validates this profile
func (m *Profile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResetPasswordNextLogin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Profile) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateResetPasswordNextLogin(formats strfmt.Registry) error {

	if err := validate.Required("reset_password_next_login", "body", m.ResetPasswordNextLogin); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *Profile) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Profile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Profile) UnmarshalBinary(b []byte) error {
	var res Profile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
