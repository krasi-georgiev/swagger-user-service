swagger: '2.0'
info:
  version: 0.0.1
  title: User Management
basePath: /v1/
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
security:
  - jwt: []

paths:
  /user:
    get:
      summary: generates a list of users
      parameters:
        - in: query
          name: offset
          type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          type: integer
          description: The numbers of items to return
        - in: query
          name: voice
          type: boolean
          description: return only users with voice activated
      responses:
        200:
          description:  full user list
          schema:
            type: array
            items:
              properties:
                id:
                  type: integer
                username:
                  type: string
                created:
                  type: string
                f2a:
                  type: integer
                voice:
                  type: integer
        default:
          $ref: "#/responses/DefaultError"
  
  /user/login:
    put:
      summary: verify and parse a login token and return all user info 
      responses:
          200:
            description: the user info associated with this token
            schema:
              $ref: "#/definitions/ProfileInfo"
          default:
            $ref: "#/responses/DefaultError"
    post:
      security: []
      summary: generates a swt token to use for authentication
      parameters:
        - in: body
          name: body
          schema:
              $ref: "#/definitions/Login"

      responses:
        200:
          description: A jwt token to use for authentication.
          schema:
            $ref: "#/definitions/Jwt"
        206:
          description: Account is with 2 factor authenticaiton so use the 2 factor endpoint to generate the final the jwt token.
          schema:
            $ref: "#/definitions/Jwt"
        201:
          description: Password change is required, hit the password reset endpoint with the generated jwt token
          schema:
            $ref: "#/definitions/Jwt"
        default:
          $ref: "#/responses/DefaultError"
  /user/2fa:
    delete:
      summary: disable 2 factor authenticaiton for an account
      parameters:
        - in: body
          name: body
          schema:
            $ref:
              "#/definitions/F2aDisable"
      responses:
        200:
          description: 2fa disabled.
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
    get:
      summary: generate qr base64 encoded image and master code for the user to scan with the google authenticator and add it to the phone app
      responses:
        200:
          description: A 2fa object.
          schema:
            properties:
              qr:
                type: string
              secret:
                type: string
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
    put:
      summary: enables 2fa on an account
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/F2aEnable"
      responses:
        200:
          description: 2fa enabled.
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
    post:
      summary: used when the account is with 2 factor authentication enabled. use the login endpoint first to get the initial jwt token and than use this endpoint to get the second jwt token after providing a valid google authenticator code
      security: []
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/F2aAuth"
      responses:
        200:
          description: the new jwt token that can be used for all endpoints.
          schema:
            $ref: "#/definitions/Jwt"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
  /user/management:
    post:
      summary: creates a new user
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Profile"
      responses:
        200:
          description: An user id of the created user.
          schema:
            type: object
            properties:
              id_profile:
                type: integer
        401:
          $ref: "#/responses/UnauthorizedError"
        409:
          $ref: "#/responses/UserExistsError"
        default:
          $ref: "#/responses/DefaultError"
    put:
      summary: updates an existing user, only submited fields will be updated so can ommit the ones that don't need updating
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/ProfileUpdate"
      responses:
        200:
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
    delete:
      summary: deletes a user from the db
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
            - id_profile
            properties:
              id_profile:
                type: integer
      responses:
        200:
          description: user deleted
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"

  /user/password:
    post:
      summary: reset an user password, when old password is not provided the user will be required to change its password upon next login using a temporary password provided by an admin
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/PassReset"
      responses:
        200:
          description: "user updated"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
    put:
      summary: resets an user password using a temporary password provided by an admin, once reset you can login as normal using the new password
      security: []
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/PassResetTemp"
      responses:
        200:
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
  /user/role:
    get:
      summary: generates a list of all user roles
      parameters:
        - in: query
          name: offset
          type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          type: integer
          description: The numbers of items to return
      responses:
        200:
          description:  full roles list
          schema:
            type: array
            items:
              $ref: "#/definitions/UserRole"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
    post:
      summary: creates a new role
      parameters:
        - in: body
          name: body
          description: the id field here is not used so you can put any number to pass the validation
          schema:
            $ref: "#/definitions/UserRole"
      responses:
        200:
          description: the id of the created role.
          schema:
            type: object
            properties:
              id :
                type: integer
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
    put:
      summary: updates a role
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/UserRole"
      responses:
        200:
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
    delete:
      summary: deletes a role
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
            - id
            properties:
              id:
                type: integer
      responses:
        200:
          description: role deleted
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/DefaultError"
responses:
  UnauthorizedError:
    description: Authentication is missing or invalid
    schema:
      $ref: "#/definitions/Response"
  UserExistsError:
    description: Username already taken
    schema:
      $ref: "#/definitions/Response"
  DefaultError:
    description: Generic Error used for most error responses - it returns a custom code and message depending on the reply context
    schema:
      $ref: "#/definitions/Response"
definitions:
  Jwt:
      type: object
      required:
      - "jwt"
      properties:
        jwt:
          type: string
  F2aAuth:
      type: object
      required:
      - jwt
      - f2a
      properties:
        jwt:
          type: string
          description: the jwt token accuired form the initial login
        f2a:
          type: string
          description: the  2 factor time code accuired from the google authenticator app
  PassReset:
      type: object
      required:
      - "id_profile"
      - "password_new"
      properties:
        id_profile:
          type: integer
        password_old:
          type: string
        password_new:
          type: string
  PassResetTemp:
      type: object
      required:
      - jwt
      - passwordNew
      properties:
        jwt:
          type: string
          description: the jwt token accuired form the initial login
        passwordNew:
          type: string
          description: the new password for this user
  F2aDisable:
      type: object
      required:
      - password
      properties:
        password:
          type: string
  F2aEnable:
      type: object
      required:
        - code
        - secret
      properties:
        code:
          type: string
          description: the 2 factor code generted by the android app after scanning the barcode
        secret:
          type: string
          description: the master password which will be used to for decoding
  Login:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
      example:
            username: "admin@mail.com"
            password: "password"
  Profile:
      type: object
      required:
      - username
      - password
      - active
      - role
      - tenant_id
      - reset_password_next_login
      properties:
        username:
          type: string
        password:
          type: string
        reset_password_next_login:
          type: boolean
        active:
          type: boolean
        email:
          type: string
        role:
          type: array
          items:
            type: integer
        tenant_id:
          type: integer
        person_id:
          type: integer
          x-nullable: true
        voice:
          type: boolean
      example:
            username: "username"
            email: "admin@mail.com"
            password: "password"
            active: true
            voice: true
            reset_password_next_login: false
            tenant_id: 1
            person_id: 1
            role:
              - 1
              - 2
  ProfileUpdate:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
      username:
        type: string
      reset_password_next_login:
        type: string
        enum:
          - "true"
          - "false"

      password:
        type: string
      active:
        type: string
        enum:
          - "true"
          - "false"
      voice:
        type: string
        enum:
          - "true"
          - "false"
      email:
        type: string
      role:
        type: array
        items:
          type: integer
      tenant_id:
        type: integer
      person_id:
        type: integer
    example:
          id: 1
          username: "username"
          email: "admin@mail.com"
          password: "password"
          reset_password_next_login: "false"
          active: "true"
          voice: "true"
          tenant_id: 1
          person_id: 1
          role:
            - 1
            - 2
  ProfileInfo:
      type: object
      required:
        - id
        - username
        - tenant_id
        - active
        - created
        - reset_password_next_login
        - voice
        - email
        - f2a
      properties:
        id:
          type: integer
        username:
          type: string
        tenant_id:
          type: integer
        active:
          type: boolean
        created:
          type: string
        reset_password_next_login:
          type: boolean
        voice:
          type: boolean
        person_id:
          type: integer
          x-nullable: true
        email:
          type: string
        f2a:
          type: boolean
      
  UserRole:
      type: object
      required:
        - name
        - id
        - data
      properties:
        id:
          type: integer
        name:
          type: string
        data:
          type: string
  Response:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string
    required:
      - code
      - message
    example:
          code: "500"
          message: "Server error"
securityDefinitions:
   jwt:
    type: apiKey
    in: header
    name: x-jwt
