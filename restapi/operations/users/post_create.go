// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// PostCreateHandlerFunc turns a function with the right signature into a post create handler
type PostCreateHandlerFunc func(PostCreateParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCreateHandlerFunc) Handle(params PostCreateParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostCreateHandler interface for that can handle valid post create params
type PostCreateHandler interface {
	Handle(PostCreateParams, interface{}) middleware.Responder
}

// NewPostCreate creates a new http.Handler for the post create operation
func NewPostCreate(ctx *middleware.Context, handler PostCreateHandler) *PostCreate {
	return &PostCreate{Context: ctx, Handler: handler}
}

/*PostCreate swagger:route POST /create users postCreate

creates a new user

*/
type PostCreate struct {
	Context *middleware.Context
	Handler PostCreateHandler
}

func (o *PostCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostCreateParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostCreateOKBody post create o k body
// swagger:model PostCreateOKBody
type PostCreateOKBody struct {

	// id profile
	// Required: true
	IDProfile *string `json:"idProfile"`
}

// Validate validates this post create o k body
func (o *PostCreateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIDProfile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCreateOKBody) validateIDProfile(formats strfmt.Registry) error {

	if err := validate.Required("postCreateOK"+"."+"idProfile", "body", o.IDProfile); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCreateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCreateOKBody) UnmarshalBinary(b []byte) error {
	var res PostCreateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
