// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutUserPasswordHandlerFunc turns a function with the right signature into a put user password handler
type PutUserPasswordHandlerFunc func(PutUserPasswordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUserPasswordHandlerFunc) Handle(params PutUserPasswordParams) middleware.Responder {
	return fn(params)
}

// PutUserPasswordHandler interface for that can handle valid put user password params
type PutUserPasswordHandler interface {
	Handle(PutUserPasswordParams) middleware.Responder
}

// NewPutUserPassword creates a new http.Handler for the put user password operation
func NewPutUserPassword(ctx *middleware.Context, handler PutUserPasswordHandler) *PutUserPassword {
	return &PutUserPassword{Context: ctx, Handler: handler}
}

/*PutUserPassword swagger:route PUT /user/password putUserPassword

resets an user password using a temporary password provided by an admin, once reset you can login as normal using the new password

*/
type PutUserPassword struct {
	Context *middleware.Context
	Handler PutUserPasswordHandler
}

func (o *PutUserPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUserPasswordParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
