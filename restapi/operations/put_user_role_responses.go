// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vanderbr/choicehealth_user-service/models"
)

// PutUserRoleOKCode is the HTTP code returned for type PutUserRoleOK
const PutUserRoleOKCode int = 200

/*PutUserRoleOK put user role o k

swagger:response putUserRoleOK
*/
type PutUserRoleOK struct {
}

// NewPutUserRoleOK creates PutUserRoleOK with default headers values
func NewPutUserRoleOK() *PutUserRoleOK {
	return &PutUserRoleOK{}
}

// WriteResponse to the client
func (o *PutUserRoleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

// PutUserRoleUnauthorizedCode is the HTTP code returned for type PutUserRoleUnauthorized
const PutUserRoleUnauthorizedCode int = 401

/*PutUserRoleUnauthorized Authentication is missing or invalid

swagger:response putUserRoleUnauthorized
*/
type PutUserRoleUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPutUserRoleUnauthorized creates PutUserRoleUnauthorized with default headers values
func NewPutUserRoleUnauthorized() *PutUserRoleUnauthorized {
	return &PutUserRoleUnauthorized{}
}

// WithPayload adds the payload to the put user role unauthorized response
func (o *PutUserRoleUnauthorized) WithPayload(payload *models.Response) *PutUserRoleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user role unauthorized response
func (o *PutUserRoleUnauthorized) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserRoleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutUserRoleDefault Generic Error used for most error responses - it returns a custom code and message depending on the reply context

swagger:response putUserRoleDefault
*/
type PutUserRoleDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPutUserRoleDefault creates PutUserRoleDefault with default headers values
func NewPutUserRoleDefault(code int) *PutUserRoleDefault {
	if code <= 0 {
		code = 500
	}

	return &PutUserRoleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put user role default response
func (o *PutUserRoleDefault) WithStatusCode(code int) *PutUserRoleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put user role default response
func (o *PutUserRoleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put user role default response
func (o *PutUserRoleDefault) WithPayload(payload *models.Response) *PutUserRoleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user role default response
func (o *PutUserRoleDefault) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserRoleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
