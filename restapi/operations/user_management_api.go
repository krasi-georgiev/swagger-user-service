// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUserManagementAPI creates a new UserManagement instance
func NewUserManagementAPI(spec *loads.Document) *UserManagementAPI {
	return &UserManagementAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		DeleteUserIDHandler: DeleteUserIDHandlerFunc(func(params DeleteUserIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserID has not yet been implemented")
		}),
		DeleteUserIDF2aHandler: DeleteUserIDF2aHandlerFunc(func(params DeleteUserIDF2aParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserIDF2a has not yet been implemented")
		}),
		DeleteUserRoleIDHandler: DeleteUserRoleIDHandlerFunc(func(params DeleteUserRoleIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserRoleID has not yet been implemented")
		}),
		GetUserF2aHandler: GetUserF2aHandlerFunc(func(params GetUserF2aParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetUserF2a has not yet been implemented")
		}),
		GetUserRolesHandler: GetUserRolesHandlerFunc(func(params GetUserRolesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetUserRoles has not yet been implemented")
		}),
		GetUsersHandler: GetUsersHandlerFunc(func(params GetUsersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetUsers has not yet been implemented")
		}),
		PostUserHandler: PostUserHandlerFunc(func(params PostUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostUser has not yet been implemented")
		}),
		PostUserF2aHandler: PostUserF2aHandlerFunc(func(params PostUserF2aParams) middleware.Responder {
			return middleware.NotImplemented("operation PostUserF2a has not yet been implemented")
		}),
		PostUserIDPasswordHandler: PostUserIDPasswordHandlerFunc(func(params PostUserIDPasswordParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostUserIDPassword has not yet been implemented")
		}),
		PostUserLoginHandler: PostUserLoginHandlerFunc(func(params PostUserLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation PostUserLogin has not yet been implemented")
		}),
		PostUserRoleHandler: PostUserRoleHandlerFunc(func(params PostUserRoleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostUserRole has not yet been implemented")
		}),
		PutUserIDHandler: PutUserIDHandlerFunc(func(params PutUserIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutUserID has not yet been implemented")
		}),
		PutUserIDF2aHandler: PutUserIDF2aHandlerFunc(func(params PutUserIDF2aParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutUserIDF2a has not yet been implemented")
		}),
		PutUserIDPasswordHandler: PutUserIDPasswordHandlerFunc(func(params PutUserIDPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation PutUserIDPassword has not yet been implemented")
		}),
		PutUserLoginHandler: PutUserLoginHandlerFunc(func(params PutUserLoginParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutUserLogin has not yet been implemented")
		}),
		PutUserRoleIDHandler: PutUserRoleIDHandlerFunc(func(params PutUserRoleIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutUserRoleID has not yet been implemented")
		}),

		// Applies when the "x-jwt" header is set
		JwtAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (jwt) x-jwt from header param [x-jwt] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*UserManagementAPI the user management API */
type UserManagementAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// JwtAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key x-jwt provided in the header
	JwtAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// DeleteUserIDHandler sets the operation handler for the delete user ID operation
	DeleteUserIDHandler DeleteUserIDHandler
	// DeleteUserIDF2aHandler sets the operation handler for the delete user ID f2a operation
	DeleteUserIDF2aHandler DeleteUserIDF2aHandler
	// DeleteUserRoleIDHandler sets the operation handler for the delete user role ID operation
	DeleteUserRoleIDHandler DeleteUserRoleIDHandler
	// GetUserF2aHandler sets the operation handler for the get user f2a operation
	GetUserF2aHandler GetUserF2aHandler
	// GetUserRolesHandler sets the operation handler for the get user roles operation
	GetUserRolesHandler GetUserRolesHandler
	// GetUsersHandler sets the operation handler for the get users operation
	GetUsersHandler GetUsersHandler
	// PostUserHandler sets the operation handler for the post user operation
	PostUserHandler PostUserHandler
	// PostUserF2aHandler sets the operation handler for the post user f2a operation
	PostUserF2aHandler PostUserF2aHandler
	// PostUserIDPasswordHandler sets the operation handler for the post user ID password operation
	PostUserIDPasswordHandler PostUserIDPasswordHandler
	// PostUserLoginHandler sets the operation handler for the post user login operation
	PostUserLoginHandler PostUserLoginHandler
	// PostUserRoleHandler sets the operation handler for the post user role operation
	PostUserRoleHandler PostUserRoleHandler
	// PutUserIDHandler sets the operation handler for the put user ID operation
	PutUserIDHandler PutUserIDHandler
	// PutUserIDF2aHandler sets the operation handler for the put user ID f2a operation
	PutUserIDF2aHandler PutUserIDF2aHandler
	// PutUserIDPasswordHandler sets the operation handler for the put user ID password operation
	PutUserIDPasswordHandler PutUserIDPasswordHandler
	// PutUserLoginHandler sets the operation handler for the put user login operation
	PutUserLoginHandler PutUserLoginHandler
	// PutUserRoleIDHandler sets the operation handler for the put user role ID operation
	PutUserRoleIDHandler PutUserRoleIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *UserManagementAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *UserManagementAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *UserManagementAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *UserManagementAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *UserManagementAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *UserManagementAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *UserManagementAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the UserManagementAPI
func (o *UserManagementAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.JwtAuth == nil {
		unregistered = append(unregistered, "XJwtAuth")
	}

	if o.DeleteUserIDHandler == nil {
		unregistered = append(unregistered, "DeleteUserIDHandler")
	}

	if o.DeleteUserIDF2aHandler == nil {
		unregistered = append(unregistered, "DeleteUserIDF2aHandler")
	}

	if o.DeleteUserRoleIDHandler == nil {
		unregistered = append(unregistered, "DeleteUserRoleIDHandler")
	}

	if o.GetUserF2aHandler == nil {
		unregistered = append(unregistered, "GetUserF2aHandler")
	}

	if o.GetUserRolesHandler == nil {
		unregistered = append(unregistered, "GetUserRolesHandler")
	}

	if o.GetUsersHandler == nil {
		unregistered = append(unregistered, "GetUsersHandler")
	}

	if o.PostUserHandler == nil {
		unregistered = append(unregistered, "PostUserHandler")
	}

	if o.PostUserF2aHandler == nil {
		unregistered = append(unregistered, "PostUserF2aHandler")
	}

	if o.PostUserIDPasswordHandler == nil {
		unregistered = append(unregistered, "PostUserIDPasswordHandler")
	}

	if o.PostUserLoginHandler == nil {
		unregistered = append(unregistered, "PostUserLoginHandler")
	}

	if o.PostUserRoleHandler == nil {
		unregistered = append(unregistered, "PostUserRoleHandler")
	}

	if o.PutUserIDHandler == nil {
		unregistered = append(unregistered, "PutUserIDHandler")
	}

	if o.PutUserIDF2aHandler == nil {
		unregistered = append(unregistered, "PutUserIDF2aHandler")
	}

	if o.PutUserIDPasswordHandler == nil {
		unregistered = append(unregistered, "PutUserIDPasswordHandler")
	}

	if o.PutUserLoginHandler == nil {
		unregistered = append(unregistered, "PutUserLoginHandler")
	}

	if o.PutUserRoleIDHandler == nil {
		unregistered = append(unregistered, "PutUserRoleIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *UserManagementAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *UserManagementAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "jwt":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.JwtAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *UserManagementAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *UserManagementAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *UserManagementAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *UserManagementAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the user management API
func (o *UserManagementAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *UserManagementAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/{id}"] = NewDeleteUserID(o.context, o.DeleteUserIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/{id}/f2a"] = NewDeleteUserIDF2a(o.context, o.DeleteUserIDF2aHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/role/{id}"] = NewDeleteUserRoleID(o.context, o.DeleteUserRoleIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/f2a"] = NewGetUserF2a(o.context, o.GetUserF2aHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/roles"] = NewGetUserRoles(o.context, o.GetUserRolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = NewGetUsers(o.context, o.GetUsersHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user"] = NewPostUser(o.context, o.PostUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/f2a"] = NewPostUserF2a(o.context, o.PostUserF2aHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/{id}/password"] = NewPostUserIDPassword(o.context, o.PostUserIDPasswordHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/login"] = NewPostUserLogin(o.context, o.PostUserLoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/role"] = NewPostUserRole(o.context, o.PostUserRoleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/{id}"] = NewPutUserID(o.context, o.PutUserIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/{id}/f2a"] = NewPutUserIDF2a(o.context, o.PutUserIDF2aHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/{id}/password"] = NewPutUserIDPassword(o.context, o.PutUserIDPasswordHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/login"] = NewPutUserLogin(o.context, o.PutUserLoginHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/role/{id}"] = NewPutUserRoleID(o.context, o.PutUserRoleIDHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *UserManagementAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *UserManagementAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
