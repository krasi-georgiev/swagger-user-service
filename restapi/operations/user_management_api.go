// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUserManagementAPI creates a new UserManagement instance
func NewUserManagementAPI(spec *loads.Document) *UserManagementAPI {
	return &UserManagementAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		DeleteUser2faHandler: DeleteUser2faHandlerFunc(func(params DeleteUser2faParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUser2fa has not yet been implemented")
		}),
		DeleteUserManagementHandler: DeleteUserManagementHandlerFunc(func(params DeleteUserManagementParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserManagement has not yet been implemented")
		}),
		DeleteUserRoleHandler: DeleteUserRoleHandlerFunc(func(params DeleteUserRoleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserRole has not yet been implemented")
		}),
		GetUserHandler: GetUserHandlerFunc(func(params GetUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetUser has not yet been implemented")
		}),
		GetUser2faHandler: GetUser2faHandlerFunc(func(params GetUser2faParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetUser2fa has not yet been implemented")
		}),
		GetUserRoleHandler: GetUserRoleHandlerFunc(func(params GetUserRoleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetUserRole has not yet been implemented")
		}),
		PostUser2faHandler: PostUser2faHandlerFunc(func(params PostUser2faParams) middleware.Responder {
			return middleware.NotImplemented("operation PostUser2fa has not yet been implemented")
		}),
		PostUserLoginHandler: PostUserLoginHandlerFunc(func(params PostUserLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation PostUserLogin has not yet been implemented")
		}),
		PostUserManagementHandler: PostUserManagementHandlerFunc(func(params PostUserManagementParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostUserManagement has not yet been implemented")
		}),
		PostUserPasswordHandler: PostUserPasswordHandlerFunc(func(params PostUserPasswordParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostUserPassword has not yet been implemented")
		}),
		PostUserRoleHandler: PostUserRoleHandlerFunc(func(params PostUserRoleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PostUserRole has not yet been implemented")
		}),
		PutUser2faHandler: PutUser2faHandlerFunc(func(params PutUser2faParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutUser2fa has not yet been implemented")
		}),
		PutUserLoginHandler: PutUserLoginHandlerFunc(func(params PutUserLoginParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutUserLogin has not yet been implemented")
		}),
		PutUserManagementHandler: PutUserManagementHandlerFunc(func(params PutUserManagementParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutUserManagement has not yet been implemented")
		}),
		PutUserPasswordHandler: PutUserPasswordHandlerFunc(func(params PutUserPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation PutUserPassword has not yet been implemented")
		}),
		PutUserRoleHandler: PutUserRoleHandlerFunc(func(params PutUserRoleParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PutUserRole has not yet been implemented")
		}),

		// Applies when the "x-jwt" header is set
		JwtAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (jwt) x-jwt from header param [x-jwt] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*UserManagementAPI the user management API */
type UserManagementAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// JwtAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key x-jwt provided in the header
	JwtAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// DeleteUser2faHandler sets the operation handler for the delete user2fa operation
	DeleteUser2faHandler DeleteUser2faHandler
	// DeleteUserManagementHandler sets the operation handler for the delete user management operation
	DeleteUserManagementHandler DeleteUserManagementHandler
	// DeleteUserRoleHandler sets the operation handler for the delete user role operation
	DeleteUserRoleHandler DeleteUserRoleHandler
	// GetUserHandler sets the operation handler for the get user operation
	GetUserHandler GetUserHandler
	// GetUser2faHandler sets the operation handler for the get user2fa operation
	GetUser2faHandler GetUser2faHandler
	// GetUserRoleHandler sets the operation handler for the get user role operation
	GetUserRoleHandler GetUserRoleHandler
	// PostUser2faHandler sets the operation handler for the post user2fa operation
	PostUser2faHandler PostUser2faHandler
	// PostUserLoginHandler sets the operation handler for the post user login operation
	PostUserLoginHandler PostUserLoginHandler
	// PostUserManagementHandler sets the operation handler for the post user management operation
	PostUserManagementHandler PostUserManagementHandler
	// PostUserPasswordHandler sets the operation handler for the post user password operation
	PostUserPasswordHandler PostUserPasswordHandler
	// PostUserRoleHandler sets the operation handler for the post user role operation
	PostUserRoleHandler PostUserRoleHandler
	// PutUser2faHandler sets the operation handler for the put user2fa operation
	PutUser2faHandler PutUser2faHandler
	// PutUserLoginHandler sets the operation handler for the put user login operation
	PutUserLoginHandler PutUserLoginHandler
	// PutUserManagementHandler sets the operation handler for the put user management operation
	PutUserManagementHandler PutUserManagementHandler
	// PutUserPasswordHandler sets the operation handler for the put user password operation
	PutUserPasswordHandler PutUserPasswordHandler
	// PutUserRoleHandler sets the operation handler for the put user role operation
	PutUserRoleHandler PutUserRoleHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *UserManagementAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *UserManagementAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *UserManagementAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *UserManagementAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *UserManagementAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *UserManagementAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *UserManagementAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the UserManagementAPI
func (o *UserManagementAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.JwtAuth == nil {
		unregistered = append(unregistered, "XJwtAuth")
	}

	if o.DeleteUser2faHandler == nil {
		unregistered = append(unregistered, "DeleteUser2faHandler")
	}

	if o.DeleteUserManagementHandler == nil {
		unregistered = append(unregistered, "DeleteUserManagementHandler")
	}

	if o.DeleteUserRoleHandler == nil {
		unregistered = append(unregistered, "DeleteUserRoleHandler")
	}

	if o.GetUserHandler == nil {
		unregistered = append(unregistered, "GetUserHandler")
	}

	if o.GetUser2faHandler == nil {
		unregistered = append(unregistered, "GetUser2faHandler")
	}

	if o.GetUserRoleHandler == nil {
		unregistered = append(unregistered, "GetUserRoleHandler")
	}

	if o.PostUser2faHandler == nil {
		unregistered = append(unregistered, "PostUser2faHandler")
	}

	if o.PostUserLoginHandler == nil {
		unregistered = append(unregistered, "PostUserLoginHandler")
	}

	if o.PostUserManagementHandler == nil {
		unregistered = append(unregistered, "PostUserManagementHandler")
	}

	if o.PostUserPasswordHandler == nil {
		unregistered = append(unregistered, "PostUserPasswordHandler")
	}

	if o.PostUserRoleHandler == nil {
		unregistered = append(unregistered, "PostUserRoleHandler")
	}

	if o.PutUser2faHandler == nil {
		unregistered = append(unregistered, "PutUser2faHandler")
	}

	if o.PutUserLoginHandler == nil {
		unregistered = append(unregistered, "PutUserLoginHandler")
	}

	if o.PutUserManagementHandler == nil {
		unregistered = append(unregistered, "PutUserManagementHandler")
	}

	if o.PutUserPasswordHandler == nil {
		unregistered = append(unregistered, "PutUserPasswordHandler")
	}

	if o.PutUserRoleHandler == nil {
		unregistered = append(unregistered, "PutUserRoleHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *UserManagementAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *UserManagementAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "jwt":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.JwtAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *UserManagementAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *UserManagementAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *UserManagementAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *UserManagementAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the user management API
func (o *UserManagementAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *UserManagementAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/2fa"] = NewDeleteUser2fa(o.context, o.DeleteUser2faHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/management"] = NewDeleteUserManagement(o.context, o.DeleteUserManagementHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user/role"] = NewDeleteUserRole(o.context, o.DeleteUserRoleHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user"] = NewGetUser(o.context, o.GetUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/2fa"] = NewGetUser2fa(o.context, o.GetUser2faHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/role"] = NewGetUserRole(o.context, o.GetUserRoleHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/2fa"] = NewPostUser2fa(o.context, o.PostUser2faHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/login"] = NewPostUserLogin(o.context, o.PostUserLoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/management"] = NewPostUserManagement(o.context, o.PostUserManagementHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/password"] = NewPostUserPassword(o.context, o.PostUserPasswordHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/role"] = NewPostUserRole(o.context, o.PostUserRoleHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/2fa"] = NewPutUser2fa(o.context, o.PutUser2faHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/login"] = NewPutUserLogin(o.context, o.PutUserLoginHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/management"] = NewPutUserManagement(o.context, o.PutUserManagementHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/password"] = NewPutUserPassword(o.context, o.PutUserPasswordHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/role"] = NewPutUserRole(o.context, o.PutUserRoleHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *UserManagementAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *UserManagementAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
