// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	swag "github.com/go-openapi/swag"
)

// DeleteUserManagementHandlerFunc turns a function with the right signature into a delete user management handler
type DeleteUserManagementHandlerFunc func(DeleteUserManagementParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteUserManagementHandlerFunc) Handle(params DeleteUserManagementParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteUserManagementHandler interface for that can handle valid delete user management params
type DeleteUserManagementHandler interface {
	Handle(DeleteUserManagementParams, interface{}) middleware.Responder
}

// NewDeleteUserManagement creates a new http.Handler for the delete user management operation
func NewDeleteUserManagement(ctx *middleware.Context, handler DeleteUserManagementHandler) *DeleteUserManagement {
	return &DeleteUserManagement{Context: ctx, Handler: handler}
}

/*DeleteUserManagement swagger:route DELETE /user/management deleteUserManagement

deletes a user from the db

*/
type DeleteUserManagement struct {
	Context *middleware.Context
	Handler DeleteUserManagementHandler
}

func (o *DeleteUserManagement) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteUserManagementParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteUserManagementBody delete user management body
// swagger:model DeleteUserManagementBody
type DeleteUserManagementBody struct {

	// id profile
	// Required: true
	IDProfile *int64 `json:"id_profile"`
}

// MarshalBinary interface implementation
func (o *DeleteUserManagementBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteUserManagementBody) UnmarshalBinary(b []byte) error {
	var res DeleteUserManagementBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
