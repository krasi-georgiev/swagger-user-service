// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vanderbr/choicehealth_user-service/models"
)

// DeleteUserIDOKCode is the HTTP code returned for type DeleteUserIDOK
const DeleteUserIDOKCode int = 200

/*DeleteUserIDOK Generic Ok Response - it returns a custom code and message depending on the reply context

swagger:response deleteUserIdOK
*/
type DeleteUserIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewDeleteUserIDOK creates DeleteUserIDOK with default headers values
func NewDeleteUserIDOK() *DeleteUserIDOK {
	return &DeleteUserIDOK{}
}

// WithPayload adds the payload to the delete user Id o k response
func (o *DeleteUserIDOK) WithPayload(payload *models.Response) *DeleteUserIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user Id o k response
func (o *DeleteUserIDOK) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteUserIDUnauthorizedCode is the HTTP code returned for type DeleteUserIDUnauthorized
const DeleteUserIDUnauthorizedCode int = 401

/*DeleteUserIDUnauthorized Authentication is missing or invalid

swagger:response deleteUserIdUnauthorized
*/
type DeleteUserIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewDeleteUserIDUnauthorized creates DeleteUserIDUnauthorized with default headers values
func NewDeleteUserIDUnauthorized() *DeleteUserIDUnauthorized {
	return &DeleteUserIDUnauthorized{}
}

// WithPayload adds the payload to the delete user Id unauthorized response
func (o *DeleteUserIDUnauthorized) WithPayload(payload *models.Response) *DeleteUserIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user Id unauthorized response
func (o *DeleteUserIDUnauthorized) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteUserIDDefault Generic Error used for most error responses - it returns a custom code and message depending on the reply context

swagger:response deleteUserIdDefault
*/
type DeleteUserIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewDeleteUserIDDefault creates DeleteUserIDDefault with default headers values
func NewDeleteUserIDDefault(code int) *DeleteUserIDDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteUserIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete user ID default response
func (o *DeleteUserIDDefault) WithStatusCode(code int) *DeleteUserIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete user ID default response
func (o *DeleteUserIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete user ID default response
func (o *DeleteUserIDDefault) WithPayload(payload *models.Response) *DeleteUserIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete user ID default response
func (o *DeleteUserIDDefault) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteUserIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
