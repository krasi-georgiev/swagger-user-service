// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutUserRoleIDHandlerFunc turns a function with the right signature into a put user role ID handler
type PutUserRoleIDHandlerFunc func(PutUserRoleIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUserRoleIDHandlerFunc) Handle(params PutUserRoleIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutUserRoleIDHandler interface for that can handle valid put user role ID params
type PutUserRoleIDHandler interface {
	Handle(PutUserRoleIDParams, interface{}) middleware.Responder
}

// NewPutUserRoleID creates a new http.Handler for the put user role ID operation
func NewPutUserRoleID(ctx *middleware.Context, handler PutUserRoleIDHandler) *PutUserRoleID {
	return &PutUserRoleID{Context: ctx, Handler: handler}
}

/*PutUserRoleID swagger:route PUT /user/role/{id} putUserRoleId

updates a role

*/
type PutUserRoleID struct {
	Context *middleware.Context
	Handler PutUserRoleIDHandler
}

func (o *PutUserRoleID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUserRoleIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
