// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	swag "github.com/go-openapi/swag"
)

// PostUserLoginHandlerFunc turns a function with the right signature into a post user login handler
type PostUserLoginHandlerFunc func(PostUserLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserLoginHandlerFunc) Handle(params PostUserLoginParams) middleware.Responder {
	return fn(params)
}

// PostUserLoginHandler interface for that can handle valid post user login params
type PostUserLoginHandler interface {
	Handle(PostUserLoginParams) middleware.Responder
}

// NewPostUserLogin creates a new http.Handler for the post user login operation
func NewPostUserLogin(ctx *middleware.Context, handler PostUserLoginHandler) *PostUserLogin {
	return &PostUserLogin{Context: ctx, Handler: handler}
}

/*PostUserLogin swagger:route POST /user/login postUserLogin

generates a swt token to use for authentication

*/
type PostUserLogin struct {
	Context *middleware.Context
	Handler PostUserLoginHandler
}

func (o *PostUserLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUserLoginParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostUserLoginBody post user login body
// swagger:model PostUserLoginBody
type PostUserLoginBody struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// password
	// Required: true
	Password *string `json:"password"`
}

// MarshalBinary interface implementation
func (o *PostUserLoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserLoginBody) UnmarshalBinary(b []byte) error {
	var res PostUserLoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
