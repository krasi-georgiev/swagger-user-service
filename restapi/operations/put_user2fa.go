// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	swag "github.com/go-openapi/swag"
)

// PutUser2faHandlerFunc turns a function with the right signature into a put user2fa handler
type PutUser2faHandlerFunc func(PutUser2faParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUser2faHandlerFunc) Handle(params PutUser2faParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutUser2faHandler interface for that can handle valid put user2fa params
type PutUser2faHandler interface {
	Handle(PutUser2faParams, interface{}) middleware.Responder
}

// NewPutUser2fa creates a new http.Handler for the put user2fa operation
func NewPutUser2fa(ctx *middleware.Context, handler PutUser2faHandler) *PutUser2fa {
	return &PutUser2fa{Context: ctx, Handler: handler}
}

/*PutUser2fa swagger:route PUT /user/2fa putUser2fa

enables 2fa on an account

*/
type PutUser2fa struct {
	Context *middleware.Context
	Handler PutUser2faHandler
}

func (o *PutUser2fa) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUser2faParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutUser2faBody put user2fa body
// swagger:model PutUser2faBody
type PutUser2faBody struct {

	// f2a
	F2a string `json:"f2a,omitempty"`
}

// MarshalBinary interface implementation
func (o *PutUser2faBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUser2faBody) UnmarshalBinary(b []byte) error {
	var res PutUser2faBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
