// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostUserF2aHandlerFunc turns a function with the right signature into a post user f2a handler
type PostUserF2aHandlerFunc func(PostUserF2aParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserF2aHandlerFunc) Handle(params PostUserF2aParams) middleware.Responder {
	return fn(params)
}

// PostUserF2aHandler interface for that can handle valid post user f2a params
type PostUserF2aHandler interface {
	Handle(PostUserF2aParams) middleware.Responder
}

// NewPostUserF2a creates a new http.Handler for the post user f2a operation
func NewPostUserF2a(ctx *middleware.Context, handler PostUserF2aHandler) *PostUserF2a {
	return &PostUserF2a{Context: ctx, Handler: handler}
}

/*PostUserF2a swagger:route POST /user/f2a postUserF2a

used when the account is with 2 factor authentication enabled. use the login endpoint first to get the initial jwt token and than use this endpoint to get the second jwt token after providing a valid google authenticator code

*/
type PostUserF2a struct {
	Context *middleware.Context
	Handler PostUserF2aHandler
}

func (o *PostUserF2a) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUserF2aParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
