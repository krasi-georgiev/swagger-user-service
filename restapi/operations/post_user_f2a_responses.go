// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vanderbr/choicehealth_user-service/models"
)

// PostUserF2aOKCode is the HTTP code returned for type PostUserF2aOK
const PostUserF2aOKCode int = 200

/*PostUserF2aOK the new jwt token that can be used for all endpoints.

swagger:response postUserF2aOK
*/
type PostUserF2aOK struct {

	/*
	  In: Body
	*/
	Payload *models.Jwt `json:"body,omitempty"`
}

// NewPostUserF2aOK creates PostUserF2aOK with default headers values
func NewPostUserF2aOK() *PostUserF2aOK {
	return &PostUserF2aOK{}
}

// WithPayload adds the payload to the post user f2a o k response
func (o *PostUserF2aOK) WithPayload(payload *models.Jwt) *PostUserF2aOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user f2a o k response
func (o *PostUserF2aOK) SetPayload(payload *models.Jwt) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserF2aOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserF2aUnauthorizedCode is the HTTP code returned for type PostUserF2aUnauthorized
const PostUserF2aUnauthorizedCode int = 401

/*PostUserF2aUnauthorized Authentication is missing or invalid

swagger:response postUserF2aUnauthorized
*/
type PostUserF2aUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPostUserF2aUnauthorized creates PostUserF2aUnauthorized with default headers values
func NewPostUserF2aUnauthorized() *PostUserF2aUnauthorized {
	return &PostUserF2aUnauthorized{}
}

// WithPayload adds the payload to the post user f2a unauthorized response
func (o *PostUserF2aUnauthorized) WithPayload(payload *models.Response) *PostUserF2aUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user f2a unauthorized response
func (o *PostUserF2aUnauthorized) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserF2aUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostUserF2aDefault Generic Error used for most error responses - it returns a custom code and message depending on the reply context

swagger:response postUserF2aDefault
*/
type PostUserF2aDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPostUserF2aDefault creates PostUserF2aDefault with default headers values
func NewPostUserF2aDefault(code int) *PostUserF2aDefault {
	if code <= 0 {
		code = 500
	}

	return &PostUserF2aDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post user f2a default response
func (o *PostUserF2aDefault) WithStatusCode(code int) *PostUserF2aDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post user f2a default response
func (o *PostUserF2aDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post user f2a default response
func (o *PostUserF2aDefault) WithPayload(payload *models.Response) *PostUserF2aDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user f2a default response
func (o *PostUserF2aDefault) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserF2aDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
