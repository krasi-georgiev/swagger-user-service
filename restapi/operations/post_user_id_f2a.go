// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostUserIDF2aHandlerFunc turns a function with the right signature into a post user ID f2a handler
type PostUserIDF2aHandlerFunc func(PostUserIDF2aParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserIDF2aHandlerFunc) Handle(params PostUserIDF2aParams) middleware.Responder {
	return fn(params)
}

// PostUserIDF2aHandler interface for that can handle valid post user ID f2a params
type PostUserIDF2aHandler interface {
	Handle(PostUserIDF2aParams) middleware.Responder
}

// NewPostUserIDF2a creates a new http.Handler for the post user ID f2a operation
func NewPostUserIDF2a(ctx *middleware.Context, handler PostUserIDF2aHandler) *PostUserIDF2a {
	return &PostUserIDF2a{Context: ctx, Handler: handler}
}

/*PostUserIDF2a swagger:route POST /user/{id}/f2a postUserIdF2a

enables 2fa on an account

*/
type PostUserIDF2a struct {
	Context *middleware.Context
	Handler PostUserIDF2aHandler
}

func (o *PostUserIDF2a) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUserIDF2aParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
