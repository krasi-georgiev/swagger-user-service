// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vanderbr/choicehealth_user-service/models"
)

// PutUserIDPasswordOKCode is the HTTP code returned for type PutUserIDPasswordOK
const PutUserIDPasswordOKCode int = 200

/*PutUserIDPasswordOK Generic Ok Response - it returns a custom code and message depending on the reply context

swagger:response putUserIdPasswordOK
*/
type PutUserIDPasswordOK struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPutUserIDPasswordOK creates PutUserIDPasswordOK with default headers values
func NewPutUserIDPasswordOK() *PutUserIDPasswordOK {
	return &PutUserIDPasswordOK{}
}

// WithPayload adds the payload to the put user Id password o k response
func (o *PutUserIDPasswordOK) WithPayload(payload *models.Response) *PutUserIDPasswordOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user Id password o k response
func (o *PutUserIDPasswordOK) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserIDPasswordOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutUserIDPasswordUnauthorizedCode is the HTTP code returned for type PutUserIDPasswordUnauthorized
const PutUserIDPasswordUnauthorizedCode int = 401

/*PutUserIDPasswordUnauthorized Authentication is missing or invalid

swagger:response putUserIdPasswordUnauthorized
*/
type PutUserIDPasswordUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPutUserIDPasswordUnauthorized creates PutUserIDPasswordUnauthorized with default headers values
func NewPutUserIDPasswordUnauthorized() *PutUserIDPasswordUnauthorized {
	return &PutUserIDPasswordUnauthorized{}
}

// WithPayload adds the payload to the put user Id password unauthorized response
func (o *PutUserIDPasswordUnauthorized) WithPayload(payload *models.Response) *PutUserIDPasswordUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user Id password unauthorized response
func (o *PutUserIDPasswordUnauthorized) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserIDPasswordUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutUserIDPasswordDefault Generic Error used for most error responses - it returns a custom code and message depending on the reply context

swagger:response putUserIdPasswordDefault
*/
type PutUserIDPasswordDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPutUserIDPasswordDefault creates PutUserIDPasswordDefault with default headers values
func NewPutUserIDPasswordDefault(code int) *PutUserIDPasswordDefault {
	if code <= 0 {
		code = 500
	}

	return &PutUserIDPasswordDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put user ID password default response
func (o *PutUserIDPasswordDefault) WithStatusCode(code int) *PutUserIDPasswordDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put user ID password default response
func (o *PutUserIDPasswordDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put user ID password default response
func (o *PutUserIDPasswordDefault) WithPayload(payload *models.Response) *PutUserIDPasswordDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user ID password default response
func (o *PutUserIDPasswordDefault) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserIDPasswordDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
