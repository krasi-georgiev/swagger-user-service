// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutUserIDF2aHandlerFunc turns a function with the right signature into a put user ID f2a handler
type PutUserIDF2aHandlerFunc func(PutUserIDF2aParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUserIDF2aHandlerFunc) Handle(params PutUserIDF2aParams) middleware.Responder {
	return fn(params)
}

// PutUserIDF2aHandler interface for that can handle valid put user ID f2a params
type PutUserIDF2aHandler interface {
	Handle(PutUserIDF2aParams) middleware.Responder
}

// NewPutUserIDF2a creates a new http.Handler for the put user ID f2a operation
func NewPutUserIDF2a(ctx *middleware.Context, handler PutUserIDF2aHandler) *PutUserIDF2a {
	return &PutUserIDF2a{Context: ctx, Handler: handler}
}

/*PutUserIDF2a swagger:route PUT /user/{id}/f2a putUserIdF2a

enables 2fa on an account

*/
type PutUserIDF2a struct {
	Context *middleware.Context
	Handler PutUserIDF2aHandler
}

func (o *PutUserIDF2a) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUserIDF2aParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
