// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostUserPasswordHandlerFunc turns a function with the right signature into a post user password handler
type PostUserPasswordHandlerFunc func(PostUserPasswordParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserPasswordHandlerFunc) Handle(params PostUserPasswordParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostUserPasswordHandler interface for that can handle valid post user password params
type PostUserPasswordHandler interface {
	Handle(PostUserPasswordParams, interface{}) middleware.Responder
}

// NewPostUserPassword creates a new http.Handler for the post user password operation
func NewPostUserPassword(ctx *middleware.Context, handler PostUserPasswordHandler) *PostUserPassword {
	return &PostUserPassword{Context: ctx, Handler: handler}
}

/*PostUserPassword swagger:route POST /user/password postUserPassword

reset an user password, when old password is not provided the user will be required to change its password upon next login using a temporary password provided by an admin

*/
type PostUserPassword struct {
	Context *middleware.Context
	Handler PostUserPasswordHandler
}

func (o *PostUserPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUserPasswordParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
