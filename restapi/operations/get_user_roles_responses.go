// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vanderbr/choicehealth_user-service/models"
)

// GetUserRolesOKCode is the HTTP code returned for type GetUserRolesOK
const GetUserRolesOKCode int = 200

/*GetUserRolesOK full roles list

swagger:response getUserRolesOK
*/
type GetUserRolesOK struct {

	/*
	  In: Body
	*/
	Payload []*GetUserRolesOKBodyItems0 `json:"body,omitempty"`
}

// NewGetUserRolesOK creates GetUserRolesOK with default headers values
func NewGetUserRolesOK() *GetUserRolesOK {
	return &GetUserRolesOK{}
}

// WithPayload adds the payload to the get user roles o k response
func (o *GetUserRolesOK) WithPayload(payload []*GetUserRolesOKBodyItems0) *GetUserRolesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user roles o k response
func (o *GetUserRolesOK) SetPayload(payload []*GetUserRolesOKBodyItems0) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserRolesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*GetUserRolesOKBodyItems0, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetUserRolesUnauthorizedCode is the HTTP code returned for type GetUserRolesUnauthorized
const GetUserRolesUnauthorizedCode int = 401

/*GetUserRolesUnauthorized Authentication is missing or invalid

swagger:response getUserRolesUnauthorized
*/
type GetUserRolesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewGetUserRolesUnauthorized creates GetUserRolesUnauthorized with default headers values
func NewGetUserRolesUnauthorized() *GetUserRolesUnauthorized {
	return &GetUserRolesUnauthorized{}
}

// WithPayload adds the payload to the get user roles unauthorized response
func (o *GetUserRolesUnauthorized) WithPayload(payload *models.Response) *GetUserRolesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user roles unauthorized response
func (o *GetUserRolesUnauthorized) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserRolesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetUserRolesDefault Generic Error used for most error responses - it returns a custom code and message depending on the reply context

swagger:response getUserRolesDefault
*/
type GetUserRolesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewGetUserRolesDefault creates GetUserRolesDefault with default headers values
func NewGetUserRolesDefault(code int) *GetUserRolesDefault {
	if code <= 0 {
		code = 500
	}

	return &GetUserRolesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get user roles default response
func (o *GetUserRolesDefault) WithStatusCode(code int) *GetUserRolesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get user roles default response
func (o *GetUserRolesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get user roles default response
func (o *GetUserRolesDefault) WithPayload(payload *models.Response) *GetUserRolesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user roles default response
func (o *GetUserRolesDefault) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserRolesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
