// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vanderbr/choicehealth_user-service/models"
)

// PutUserIDF2aOKCode is the HTTP code returned for type PutUserIDF2aOK
const PutUserIDF2aOKCode int = 200

/*PutUserIDF2aOK Generic Ok Response - it returns a custom code and message depending on the reply context

swagger:response putUserIdF2aOK
*/
type PutUserIDF2aOK struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPutUserIDF2aOK creates PutUserIDF2aOK with default headers values
func NewPutUserIDF2aOK() *PutUserIDF2aOK {
	return &PutUserIDF2aOK{}
}

// WithPayload adds the payload to the put user Id f2a o k response
func (o *PutUserIDF2aOK) WithPayload(payload *models.Response) *PutUserIDF2aOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user Id f2a o k response
func (o *PutUserIDF2aOK) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserIDF2aOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutUserIDF2aUnauthorizedCode is the HTTP code returned for type PutUserIDF2aUnauthorized
const PutUserIDF2aUnauthorizedCode int = 401

/*PutUserIDF2aUnauthorized Authentication is missing or invalid

swagger:response putUserIdF2aUnauthorized
*/
type PutUserIDF2aUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPutUserIDF2aUnauthorized creates PutUserIDF2aUnauthorized with default headers values
func NewPutUserIDF2aUnauthorized() *PutUserIDF2aUnauthorized {
	return &PutUserIDF2aUnauthorized{}
}

// WithPayload adds the payload to the put user Id f2a unauthorized response
func (o *PutUserIDF2aUnauthorized) WithPayload(payload *models.Response) *PutUserIDF2aUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user Id f2a unauthorized response
func (o *PutUserIDF2aUnauthorized) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserIDF2aUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutUserIDF2aDefault Generic Error used for most error responses - it returns a custom code and message depending on the reply context

swagger:response putUserIdF2aDefault
*/
type PutUserIDF2aDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPutUserIDF2aDefault creates PutUserIDF2aDefault with default headers values
func NewPutUserIDF2aDefault(code int) *PutUserIDF2aDefault {
	if code <= 0 {
		code = 500
	}

	return &PutUserIDF2aDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put user ID f2a default response
func (o *PutUserIDF2aDefault) WithStatusCode(code int) *PutUserIDF2aDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put user ID f2a default response
func (o *PutUserIDF2aDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put user ID f2a default response
func (o *PutUserIDF2aDefault) WithPayload(payload *models.Response) *PutUserIDF2aDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user ID f2a default response
func (o *PutUserIDF2aDefault) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserIDF2aDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
