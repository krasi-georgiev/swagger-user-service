// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// GetUserRolesHandlerFunc turns a function with the right signature into a get user roles handler
type GetUserRolesHandlerFunc func(GetUserRolesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserRolesHandlerFunc) Handle(params GetUserRolesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetUserRolesHandler interface for that can handle valid get user roles params
type GetUserRolesHandler interface {
	Handle(GetUserRolesParams, interface{}) middleware.Responder
}

// NewGetUserRoles creates a new http.Handler for the get user roles operation
func NewGetUserRoles(ctx *middleware.Context, handler GetUserRolesHandler) *GetUserRoles {
	return &GetUserRoles{Context: ctx, Handler: handler}
}

/*GetUserRoles swagger:route GET /user/roles getUserRoles

generates a list of all user roles

*/
type GetUserRoles struct {
	Context *middleware.Context
	Handler GetUserRolesHandler
}

func (o *GetUserRoles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserRolesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetUserRolesOKBodyItems0 get user roles o k body items0
// swagger:model GetUserRolesOKBodyItems0

type GetUserRolesOKBodyItems0 struct {

	// data
	Data string `json:"data,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

/* polymorph GetUserRolesOKBodyItems0 data false */

/* polymorph GetUserRolesOKBodyItems0 id false */

/* polymorph GetUserRolesOKBodyItems0 name false */

// Validate validates this get user roles o k body items0
func (o *GetUserRolesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserRolesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserRolesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetUserRolesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
